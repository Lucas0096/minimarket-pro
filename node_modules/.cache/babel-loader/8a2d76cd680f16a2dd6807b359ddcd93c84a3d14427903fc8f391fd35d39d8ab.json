{"ast":null,"code":"import { getAllData, putData, addData, syncLocalStorageWithIndexedDB } from './indexedDb';\nexport const authenticateUser = async (username, password) => {\n  // Definir usuarios predefinidos\n  const predefinedUsers = [{\n    id: 'admin',\n    username: 'admin',\n    password: 'admin',\n    role: 'admin',\n    marketId: null\n  }, {\n    id: 'lucas',\n    username: 'lucas',\n    password: 'lucas',\n    role: 'admin',\n    marketId: null\n  }, {\n    id: 'market1',\n    username: 'market1',\n    password: 'market1',\n    role: 'market',\n    marketId: 'market1'\n  }, {\n    id: 'vendedor',\n    username: 'vendedor',\n    password: 'vendedor',\n    role: 'vendedor',\n    marketId: 'market1'\n  }];\n\n  // Asegurarse de que los usuarios predefinidos existan en IndexedDB\n  // y que sus datos estén actualizados (especialmente el rol)\n  for (const user of predefinedUsers) {\n    const existingUser = (await getAllData('users')).find(u => u.id === user.id);\n    if (!existingUser) {\n      await addData('users', user);\n    } else {\n      // Actualizar si hay cambios en los datos predefinidos (ej. rol, password)\n      await putData('users', user);\n    }\n  }\n  // Sincronizar localStorage con la versión más reciente de usuarios de IndexedDB\n  // Esto es crucial para que `getCurrentUser` tenga la información correcta inmediatamente\n  await syncLocalStorageWithIndexedDB('users', await getAllData('users'));\n\n  // Buscar en todos los usuarios (predefinidos y creados por admin) en IndexedDB\n  const allUsers = await getAllData('users');\n  const user = allUsers.find(u => u.username === username && u.password === password);\n  if (user) {\n    // Guardar el usuario actual en localStorage\n    localStorage.setItem('currentUser', JSON.stringify({\n      username: user.username,\n      role: user.role,\n      marketId: user.marketId\n    }));\n    return true;\n  }\n  return false;\n};\nexport const getCurrentUser = () => {\n  const user = localStorage.getItem('currentUser');\n  return user ? JSON.parse(user) : null;\n};\nexport const logoutUser = () => {\n  localStorage.removeItem('currentUser');\n};\n\n// Las funciones isAdmin, isMarket, isVendedor ahora aceptan un objeto user opcional\n// Esto permite verificar el rol de un usuario específico sin depender del currentUser global\nexport const isAdmin = (user = getCurrentUser()) => {\n  return (user === null || user === void 0 ? void 0 : user.role) === 'admin';\n};\nexport const isMarket = (user = getCurrentUser()) => {\n  return (user === null || user === void 0 ? void 0 : user.role) === 'market';\n};\nexport const isVendedor = (user = getCurrentUser()) => {\n  return (user === null || user === void 0 ? void 0 : user.role) === 'vendedor';\n};\nexport const getCurrentMarket = () => {\n  const user = getCurrentUser();\n  return user === null || user === void 0 ? void 0 : user.marketId;\n};\n\n// DONE","map":{"version":3,"names":["getAllData","putData","addData","syncLocalStorageWithIndexedDB","authenticateUser","username","password","predefinedUsers","id","role","marketId","user","existingUser","find","u","allUsers","localStorage","setItem","JSON","stringify","getCurrentUser","getItem","parse","logoutUser","removeItem","isAdmin","isMarket","isVendedor","getCurrentMarket"],"sources":["C:/Users/lucas/OneDrive/Documentos/Minimarket PRO/Version 1.0/src/utils/auth.js"],"sourcesContent":["import { getAllData, putData, addData, syncLocalStorageWithIndexedDB } from './indexedDb';\n\nexport const authenticateUser = async (username, password) => {\n  // Definir usuarios predefinidos\n  const predefinedUsers = [\n    { id: 'admin', username: 'admin', password: 'admin', role: 'admin', marketId: null },\n    { id: 'lucas', username: 'lucas', password: 'lucas', role: 'admin', marketId: null },\n    { id: 'market1', username: 'market1', password: 'market1', role: 'market', marketId: 'market1' },\n    { id: 'vendedor', username: 'vendedor', password: 'vendedor', role: 'vendedor', marketId: 'market1' }\n  ];\n\n  // Asegurarse de que los usuarios predefinidos existan en IndexedDB\n  // y que sus datos estén actualizados (especialmente el rol)\n  for (const user of predefinedUsers) {\n    const existingUser = (await getAllData('users')).find(u => u.id === user.id);\n    if (!existingUser) {\n      await addData('users', user);\n    } else {\n      // Actualizar si hay cambios en los datos predefinidos (ej. rol, password)\n      await putData('users', user);\n    }\n  }\n  // Sincronizar localStorage con la versión más reciente de usuarios de IndexedDB\n  // Esto es crucial para que `getCurrentUser` tenga la información correcta inmediatamente\n  await syncLocalStorageWithIndexedDB('users', await getAllData('users'));\n\n  // Buscar en todos los usuarios (predefinidos y creados por admin) en IndexedDB\n  const allUsers = await getAllData('users');\n  const user = allUsers.find(u => u.username === username && u.password === password);\n  \n  if (user) {\n    // Guardar el usuario actual en localStorage\n    localStorage.setItem('currentUser', JSON.stringify({\n      username: user.username,\n      role: user.role,\n      marketId: user.marketId\n    }));\n    return true;\n  }\n  \n  return false;\n};\n\nexport const getCurrentUser = () => {\n  const user = localStorage.getItem('currentUser');\n  return user ? JSON.parse(user) : null;\n};\n\nexport const logoutUser = () => {\n  localStorage.removeItem('currentUser');\n};\n\n// Las funciones isAdmin, isMarket, isVendedor ahora aceptan un objeto user opcional\n// Esto permite verificar el rol de un usuario específico sin depender del currentUser global\nexport const isAdmin = (user = getCurrentUser()) => {\n  return user?.role === 'admin';\n};\n\nexport const isMarket = (user = getCurrentUser()) => {\n  return user?.role === 'market';\n};\n\nexport const isVendedor = (user = getCurrentUser()) => {\n  return user?.role === 'vendedor';\n};\n\nexport const getCurrentMarket = () => {\n  const user = getCurrentUser();\n  return user?.marketId;\n};\n\n// DONE"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}