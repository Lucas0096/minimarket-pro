{"ast":null,"code":"const DB_NAME = 'MiniMarketProDB';\nconst DB_VERSION = 1;\nexport const STORES = ['products', 'sales', 'users', 'markets', 'suppliers', 'customers', 'cashMovements', 'expenses', 'salesTarget', 'desiredProfit', 'ReportsDashboard'];\nconst openDB = () => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n      STORES.forEach(storeName => {\n        if (!db.objectStoreNames.contains(storeName)) {\n          if (storeName.startsWith('cashMovements_') || storeName.startsWith('cashRegisterState_')) {\n            db.createObjectStore(storeName, {\n              keyPath: 'id'\n            });\n          } else {\n            db.createObjectStore(storeName, {\n              keyPath: 'id',\n              autoIncrement: true\n            });\n          }\n        }\n      });\n    };\n    request.onsuccess = event => {\n      resolve(event.target.result);\n    };\n    request.onerror = event => {\n      reject('Error opening IndexedDB:', event.target.error);\n    };\n  });\n};\nconst getObjectStore = async (storeName, mode) => {\n  const db = await openDB();\n  const transaction = db.transaction(storeName, mode);\n  return transaction.objectStore(storeName);\n};\nexport const getAllData = async storeName => {\n  const store = await getObjectStore(storeName, 'readonly');\n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n};\nexport const addData = async (storeName, data) => {\n  const store = await getObjectStore(storeName, 'readwrite');\n  return new Promise((resolve, reject) => {\n    const request = store.add(data);\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n};\nexport const putData = async (storeName, data) => {\n  const store = await getObjectStore(storeName, 'readwrite');\n  return new Promise((resolve, reject) => {\n    const request = store.put(data);\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n};\nexport const deleteData = async (storeName, id) => {\n  const store = await getObjectStore(storeName, 'readwrite');\n  return new Promise((resolve, reject) => {\n    const request = store.delete(id);\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n};\nexport const clearStore = async storeName => {\n  const store = await getObjectStore(storeName, 'readwrite');\n  return new Promise((resolve, reject) => {\n    const request = store.clear();\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n};\nexport const initializeDBFromLocalStorage = async () => {\n  const db = await openDB();\n  const transaction = db.transaction(STORES, 'readwrite');\n  for (const storeName of STORES) {\n    const store = transaction.objectStore(storeName);\n    const countRequest = store.count();\n    await new Promise((resolve, reject) => {\n      countRequest.onsuccess = () => {\n        if (countRequest.result === 0) {\n          const localStorageData = JSON.parse(localStorage.getItem(storeName)) || [];\n          localStorageData.forEach(item => {\n            store.add(item);\n          });\n          console.log(`IndexedDB store '${storeName}' initialized from localStorage.`);\n        }\n        resolve();\n      };\n      countRequest.onerror = () => reject(countRequest.error);\n    });\n  }\n  console.log('IndexedDB initialization complete.');\n};\nexport const syncLocalStorageWithIndexedDB = async (storeName, data) => {\n  try {\n    localStorage.setItem(storeName, JSON.stringify(data));\n    console.log(`LocalStorage for '${storeName}' synchronized.`);\n  } catch (error) {\n    console.error(`Error syncing ${storeName}:`, error);\n  }\n};\nexport const syncWithBackend = async () => {\n  console.log('Sincronizando con backend...');\n  for (const storeName of STORES) {\n    const localData = await getAllData(storeName);\n    if (localData.length > 0) {\n      console.log(`Enviando ${storeName} a backend:`, localData);\n      // Aquí iría la lógica real para enviar datos al backend\n    }\n  }\n  console.log('Sincronización con backend completada.');\n};","map":{"version":3,"names":["DB_NAME","DB_VERSION","STORES","openDB","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","db","target","result","forEach","storeName","objectStoreNames","contains","startsWith","createObjectStore","keyPath","autoIncrement","onsuccess","onerror","error","getObjectStore","mode","transaction","objectStore","getAllData","store","getAll","addData","data","add","putData","put","deleteData","id","delete","clearStore","clear","initializeDBFromLocalStorage","countRequest","count","localStorageData","JSON","parse","localStorage","getItem","item","console","log","syncLocalStorageWithIndexedDB","setItem","stringify","syncWithBackend","localData","length"],"sources":["C:/Users/lucas/OneDrive/Documentos/Minimarket PRO/Version 1.0/src/utils/indexedDb.js"],"sourcesContent":["const DB_NAME = 'MiniMarketProDB';\nconst DB_VERSION = 1;\nexport const STORES = ['products', 'sales', 'users', 'markets', 'suppliers', 'customers', 'cashMovements', 'expenses', 'salesTarget', 'desiredProfit','ReportsDashboard'];\n\nconst openDB = () => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      STORES.forEach(storeName => {\n        if (!db.objectStoreNames.contains(storeName)) {\n          if (storeName.startsWith('cashMovements_') || storeName.startsWith('cashRegisterState_')) {\n            db.createObjectStore(storeName, { keyPath: 'id' });\n          } else {\n            db.createObjectStore(storeName, { keyPath: 'id', autoIncrement: true });\n          }\n        }\n      });\n    };\n\n    request.onsuccess = (event) => {\n      resolve(event.target.result);\n    };\n\n    request.onerror = (event) => {\n      reject('Error opening IndexedDB:', event.target.error);\n    };\n  });\n};\n\nconst getObjectStore = async (storeName, mode) => {\n  const db = await openDB();\n  const transaction = db.transaction(storeName, mode);\n  return transaction.objectStore(storeName);\n};\n\nexport const getAllData = async (storeName) => {\n  const store = await getObjectStore(storeName, 'readonly');\n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n};\n\nexport const addData = async (storeName, data) => {\n  const store = await getObjectStore(storeName, 'readwrite');\n  return new Promise((resolve, reject) => {\n    const request = store.add(data);\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n};\n\nexport const putData = async (storeName, data) => {\n  const store = await getObjectStore(storeName, 'readwrite');\n  return new Promise((resolve, reject) => {\n    const request = store.put(data);\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n};\n\nexport const deleteData = async (storeName, id) => {\n  const store = await getObjectStore(storeName, 'readwrite');\n  return new Promise((resolve, reject) => {\n    const request = store.delete(id);\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n};\n\nexport const clearStore = async (storeName) => {\n  const store = await getObjectStore(storeName, 'readwrite');\n  return new Promise((resolve, reject) => {\n    const request = store.clear();\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n};\n\nexport const initializeDBFromLocalStorage = async () => {\n  const db = await openDB();\n  const transaction = db.transaction(STORES, 'readwrite');\n\n  for (const storeName of STORES) {\n    const store = transaction.objectStore(storeName);\n    const countRequest = store.count();\n\n    await new Promise((resolve, reject) => {\n      countRequest.onsuccess = () => {\n        if (countRequest.result === 0) {\n          const localStorageData = JSON.parse(localStorage.getItem(storeName)) || [];\n          localStorageData.forEach(item => {\n            store.add(item);\n          });\n          console.log(`IndexedDB store '${storeName}' initialized from localStorage.`);\n        }\n        resolve();\n      };\n      countRequest.onerror = () => reject(countRequest.error);\n    });\n  }\n  console.log('IndexedDB initialization complete.');\n};\n\nexport const syncLocalStorageWithIndexedDB = async (storeName, data) => {\n  try {\n    localStorage.setItem(storeName, JSON.stringify(data)); \n    console.log(`LocalStorage for '${storeName}' synchronized.`);\n  } catch (error) {\n    console.error(`Error syncing ${storeName}:`, error);\n  }\n};\n\nexport const syncWithBackend = async () => {\n  console.log('Sincronizando con backend...');\n  for (const storeName of STORES) {\n    const localData = await getAllData(storeName);\n    if (localData.length > 0) {\n      console.log(`Enviando ${storeName} a backend:`, localData);\n      // Aquí iría la lógica real para enviar datos al backend\n    }\n  }\n  console.log('Sincronización con backend completada.');\n};\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,iBAAiB;AACjC,MAAMC,UAAU,GAAG,CAAC;AACpB,OAAO,MAAMC,MAAM,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,eAAe,EAAE,UAAU,EAAE,aAAa,EAAE,eAAe,EAAC,kBAAkB,CAAC;AAEzK,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACnB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,OAAO,GAAGC,SAAS,CAACC,IAAI,CAACT,OAAO,EAAEC,UAAU,CAAC;IAEnDM,OAAO,CAACG,eAAe,GAAIC,KAAK,IAAK;MACnC,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;MAC9BZ,MAAM,CAACa,OAAO,CAACC,SAAS,IAAI;QAC1B,IAAI,CAACJ,EAAE,CAACK,gBAAgB,CAACC,QAAQ,CAACF,SAAS,CAAC,EAAE;UAC5C,IAAIA,SAAS,CAACG,UAAU,CAAC,gBAAgB,CAAC,IAAIH,SAAS,CAACG,UAAU,CAAC,oBAAoB,CAAC,EAAE;YACxFP,EAAE,CAACQ,iBAAiB,CAACJ,SAAS,EAAE;cAAEK,OAAO,EAAE;YAAK,CAAC,CAAC;UACpD,CAAC,MAAM;YACLT,EAAE,CAACQ,iBAAiB,CAACJ,SAAS,EAAE;cAAEK,OAAO,EAAE,IAAI;cAAEC,aAAa,EAAE;YAAK,CAAC,CAAC;UACzE;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAEDf,OAAO,CAACgB,SAAS,GAAIZ,KAAK,IAAK;MAC7BN,OAAO,CAACM,KAAK,CAACE,MAAM,CAACC,MAAM,CAAC;IAC9B,CAAC;IAEDP,OAAO,CAACiB,OAAO,GAAIb,KAAK,IAAK;MAC3BL,MAAM,CAAC,0BAA0B,EAAEK,KAAK,CAACE,MAAM,CAACY,KAAK,CAAC;IACxD,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;AAED,MAAMC,cAAc,GAAG,MAAAA,CAAOV,SAAS,EAAEW,IAAI,KAAK;EAChD,MAAMf,EAAE,GAAG,MAAMT,MAAM,CAAC,CAAC;EACzB,MAAMyB,WAAW,GAAGhB,EAAE,CAACgB,WAAW,CAACZ,SAAS,EAAEW,IAAI,CAAC;EACnD,OAAOC,WAAW,CAACC,WAAW,CAACb,SAAS,CAAC;AAC3C,CAAC;AAED,OAAO,MAAMc,UAAU,GAAG,MAAOd,SAAS,IAAK;EAC7C,MAAMe,KAAK,GAAG,MAAML,cAAc,CAACV,SAAS,EAAE,UAAU,CAAC;EACzD,OAAO,IAAIZ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,OAAO,GAAGwB,KAAK,CAACC,MAAM,CAAC,CAAC;IAC9BzB,OAAO,CAACgB,SAAS,GAAG,MAAMlB,OAAO,CAACE,OAAO,CAACO,MAAM,CAAC;IACjDP,OAAO,CAACiB,OAAO,GAAG,MAAMlB,MAAM,CAACC,OAAO,CAACkB,KAAK,CAAC;EAC/C,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMQ,OAAO,GAAG,MAAAA,CAAOjB,SAAS,EAAEkB,IAAI,KAAK;EAChD,MAAMH,KAAK,GAAG,MAAML,cAAc,CAACV,SAAS,EAAE,WAAW,CAAC;EAC1D,OAAO,IAAIZ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,OAAO,GAAGwB,KAAK,CAACI,GAAG,CAACD,IAAI,CAAC;IAC/B3B,OAAO,CAACgB,SAAS,GAAG,MAAMlB,OAAO,CAACE,OAAO,CAACO,MAAM,CAAC;IACjDP,OAAO,CAACiB,OAAO,GAAG,MAAMlB,MAAM,CAACC,OAAO,CAACkB,KAAK,CAAC;EAC/C,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMW,OAAO,GAAG,MAAAA,CAAOpB,SAAS,EAAEkB,IAAI,KAAK;EAChD,MAAMH,KAAK,GAAG,MAAML,cAAc,CAACV,SAAS,EAAE,WAAW,CAAC;EAC1D,OAAO,IAAIZ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,OAAO,GAAGwB,KAAK,CAACM,GAAG,CAACH,IAAI,CAAC;IAC/B3B,OAAO,CAACgB,SAAS,GAAG,MAAMlB,OAAO,CAACE,OAAO,CAACO,MAAM,CAAC;IACjDP,OAAO,CAACiB,OAAO,GAAG,MAAMlB,MAAM,CAACC,OAAO,CAACkB,KAAK,CAAC;EAC/C,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMa,UAAU,GAAG,MAAAA,CAAOtB,SAAS,EAAEuB,EAAE,KAAK;EACjD,MAAMR,KAAK,GAAG,MAAML,cAAc,CAACV,SAAS,EAAE,WAAW,CAAC;EAC1D,OAAO,IAAIZ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,OAAO,GAAGwB,KAAK,CAACS,MAAM,CAACD,EAAE,CAAC;IAChChC,OAAO,CAACgB,SAAS,GAAG,MAAMlB,OAAO,CAACE,OAAO,CAACO,MAAM,CAAC;IACjDP,OAAO,CAACiB,OAAO,GAAG,MAAMlB,MAAM,CAACC,OAAO,CAACkB,KAAK,CAAC;EAC/C,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMgB,UAAU,GAAG,MAAOzB,SAAS,IAAK;EAC7C,MAAMe,KAAK,GAAG,MAAML,cAAc,CAACV,SAAS,EAAE,WAAW,CAAC;EAC1D,OAAO,IAAIZ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,OAAO,GAAGwB,KAAK,CAACW,KAAK,CAAC,CAAC;IAC7BnC,OAAO,CAACgB,SAAS,GAAG,MAAMlB,OAAO,CAACE,OAAO,CAACO,MAAM,CAAC;IACjDP,OAAO,CAACiB,OAAO,GAAG,MAAMlB,MAAM,CAACC,OAAO,CAACkB,KAAK,CAAC;EAC/C,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMkB,4BAA4B,GAAG,MAAAA,CAAA,KAAY;EACtD,MAAM/B,EAAE,GAAG,MAAMT,MAAM,CAAC,CAAC;EACzB,MAAMyB,WAAW,GAAGhB,EAAE,CAACgB,WAAW,CAAC1B,MAAM,EAAE,WAAW,CAAC;EAEvD,KAAK,MAAMc,SAAS,IAAId,MAAM,EAAE;IAC9B,MAAM6B,KAAK,GAAGH,WAAW,CAACC,WAAW,CAACb,SAAS,CAAC;IAChD,MAAM4B,YAAY,GAAGb,KAAK,CAACc,KAAK,CAAC,CAAC;IAElC,MAAM,IAAIzC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACrCsC,YAAY,CAACrB,SAAS,GAAG,MAAM;QAC7B,IAAIqB,YAAY,CAAC9B,MAAM,KAAK,CAAC,EAAE;UAC7B,MAAMgC,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAClC,SAAS,CAAC,CAAC,IAAI,EAAE;UAC1E8B,gBAAgB,CAAC/B,OAAO,CAACoC,IAAI,IAAI;YAC/BpB,KAAK,CAACI,GAAG,CAACgB,IAAI,CAAC;UACjB,CAAC,CAAC;UACFC,OAAO,CAACC,GAAG,CAAC,oBAAoBrC,SAAS,kCAAkC,CAAC;QAC9E;QACAX,OAAO,CAAC,CAAC;MACX,CAAC;MACDuC,YAAY,CAACpB,OAAO,GAAG,MAAMlB,MAAM,CAACsC,YAAY,CAACnB,KAAK,CAAC;IACzD,CAAC,CAAC;EACJ;EACA2B,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;AACnD,CAAC;AAED,OAAO,MAAMC,6BAA6B,GAAG,MAAAA,CAAOtC,SAAS,EAAEkB,IAAI,KAAK;EACtE,IAAI;IACFe,YAAY,CAACM,OAAO,CAACvC,SAAS,EAAE+B,IAAI,CAACS,SAAS,CAACtB,IAAI,CAAC,CAAC;IACrDkB,OAAO,CAACC,GAAG,CAAC,qBAAqBrC,SAAS,iBAAiB,CAAC;EAC9D,CAAC,CAAC,OAAOS,KAAK,EAAE;IACd2B,OAAO,CAAC3B,KAAK,CAAC,iBAAiBT,SAAS,GAAG,EAAES,KAAK,CAAC;EACrD;AACF,CAAC;AAED,OAAO,MAAMgC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzCL,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;EAC3C,KAAK,MAAMrC,SAAS,IAAId,MAAM,EAAE;IAC9B,MAAMwD,SAAS,GAAG,MAAM5B,UAAU,CAACd,SAAS,CAAC;IAC7C,IAAI0C,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACxBP,OAAO,CAACC,GAAG,CAAC,YAAYrC,SAAS,aAAa,EAAE0C,SAAS,CAAC;MAC1D;IACF;EACF;EACAN,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;AACvD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}