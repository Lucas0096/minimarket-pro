{"ast":null,"code":"import { getCurrentUser } from './auth';\nconst checkAndNotify = () => {\n  const currentUser = getCurrentUser();\n  if (!currentUser) return;\n\n  // Recordatorio de Apertura/Cierre de Caja\n  const cashRegisterState = JSON.parse(localStorage.getItem(`cashRegisterState_${currentUser.username}`));\n  if (cashRegisterState === null || cashRegisterState === 'closed') {\n    console.log(`[BOT] ${currentUser.username}: ¡Recuerda abrir la caja para tu turno!`);\n    // alert(`[BOT] ${currentUser.username}: ¡Recuerda abrir la caja para tu turno!`); // Para demostración\n  } else if (cashRegisterState === 'open') {\n    const lastOpening = JSON.parse(localStorage.getItem(`cashMovements_${currentUser.username}`)).find(m => m.type === 'opening' && m.status === 'open');\n    const now = new Date();\n    const openingTime = new Date(lastOpening.date);\n    const hoursSinceOpening = (now - openingTime) / (1000 * 60 * 60);\n    if (hoursSinceOpening > 8) {\n      // Si la caja lleva abierta más de 8 horas\n      console.log(`[BOT] ${currentUser.username}: ¡Tu turno está por terminar! Recuerda cerrar la caja.`);\n      // alert(`[BOT] ${currentUser.username}: ¡Tu turno está por terminar! Recuerda cerrar la caja.`); // Para demostración\n    }\n  }\n\n  // Notificación de Cuentas por Cobrar (solo para Admin y Market)\n  if (currentUser.role === 'admin' || currentUser.role === 'market') {\n    const allSales = JSON.parse(localStorage.getItem('sales')) || [];\n    const marketId = currentUser.marketId || null; // Admin puede ver todos, Market solo el suyo\n\n    const currentAccountSales = allSales.filter(sale => sale.paymentMethod === 'current_account' && (marketId === null || sale.marketId === marketId));\n    const customersWithDebt = {};\n    currentAccountSales.forEach(sale => {\n      if (!customersWithDebt[sale.customerName]) {\n        customersWithDebt[sale.customerName] = {\n          name: sale.customerName,\n          totalDebt: 0,\n          phone: sale.customerPhone // Asumiendo que el teléfono se guarda en la venta\n        };\n      }\n      customersWithDebt[sale.customerName].totalDebt += sale.total;\n    });\n    Object.values(customersWithDebt).forEach(customer => {\n      if (customer.totalDebt > 0) {\n        console.log(`[BOT] ${currentUser.username}: ¡Recordatorio! El cliente ${customer.name} debe $${customer.totalDebt.toFixed(2)}.`);\n        // alert(`[BOT] ${currentUser.username}: ¡Recordatorio! El cliente ${customer.name} debe $${customer.totalDebt.toFixed(2)}.`); // Para demostración\n        // Aquí se integraría con Twilio/Zenvia si se tuviera la API\n      }\n    });\n  }\n};\n\n// Ejecutar el bot cada cierto tiempo (ej. cada hora)\n// setInterval(checkAndNotify, 1000 * 60 * 60); // Cada hora\n// Para demostración, se puede ejecutar más seguido o al cargar la app\n// checkAndNotify(); // Ejecutar al inicio\n\nexport { checkAndNotify };","map":{"version":3,"names":["getCurrentUser","checkAndNotify","currentUser","cashRegisterState","JSON","parse","localStorage","getItem","username","console","log","lastOpening","find","m","type","status","now","Date","openingTime","date","hoursSinceOpening","role","allSales","marketId","currentAccountSales","filter","sale","paymentMethod","customersWithDebt","forEach","customerName","name","totalDebt","phone","customerPhone","total","Object","values","customer","toFixed"],"sources":["C:/Users/lucas/OneDrive/Documentos/Minimarket PRO/Version 1.0/src/utils/bot.js"],"sourcesContent":["import { getCurrentUser } from './auth';\n\nconst checkAndNotify = () => {\n  const currentUser = getCurrentUser();\n  if (!currentUser) return;\n\n  // Recordatorio de Apertura/Cierre de Caja\n  const cashRegisterState = JSON.parse(localStorage.getItem(`cashRegisterState_${currentUser.username}`));\n  if (cashRegisterState === null || cashRegisterState === 'closed') {\n    console.log(`[BOT] ${currentUser.username}: ¡Recuerda abrir la caja para tu turno!`);\n    // alert(`[BOT] ${currentUser.username}: ¡Recuerda abrir la caja para tu turno!`); // Para demostración\n  } else if (cashRegisterState === 'open') {\n    const lastOpening = JSON.parse(localStorage.getItem(`cashMovements_${currentUser.username}`))\n      .find(m => m.type === 'opening' && m.status === 'open');\n    const now = new Date();\n    const openingTime = new Date(lastOpening.date);\n    const hoursSinceOpening = (now - openingTime) / (1000 * 60 * 60);\n\n    if (hoursSinceOpening > 8) { // Si la caja lleva abierta más de 8 horas\n      console.log(`[BOT] ${currentUser.username}: ¡Tu turno está por terminar! Recuerda cerrar la caja.`);\n      // alert(`[BOT] ${currentUser.username}: ¡Tu turno está por terminar! Recuerda cerrar la caja.`); // Para demostración\n    }\n  }\n\n  // Notificación de Cuentas por Cobrar (solo para Admin y Market)\n  if (currentUser.role === 'admin' || currentUser.role === 'market') {\n    const allSales = JSON.parse(localStorage.getItem('sales')) || [];\n    const marketId = currentUser.marketId || null; // Admin puede ver todos, Market solo el suyo\n\n    const currentAccountSales = allSales.filter(sale => \n      sale.paymentMethod === 'current_account' && \n      (marketId === null || sale.marketId === marketId)\n    );\n\n    const customersWithDebt = {};\n    currentAccountSales.forEach(sale => {\n      if (!customersWithDebt[sale.customerName]) {\n        customersWithDebt[sale.customerName] = {\n          name: sale.customerName,\n          totalDebt: 0,\n          phone: sale.customerPhone // Asumiendo que el teléfono se guarda en la venta\n        };\n      }\n      customersWithDebt[sale.customerName].totalDebt += sale.total;\n    });\n\n    Object.values(customersWithDebt).forEach(customer => {\n      if (customer.totalDebt > 0) {\n        console.log(`[BOT] ${currentUser.username}: ¡Recordatorio! El cliente ${customer.name} debe $${customer.totalDebt.toFixed(2)}.`);\n        // alert(`[BOT] ${currentUser.username}: ¡Recordatorio! El cliente ${customer.name} debe $${customer.totalDebt.toFixed(2)}.`); // Para demostración\n        // Aquí se integraría con Twilio/Zenvia si se tuviera la API\n      }\n    });\n  }\n};\n\n// Ejecutar el bot cada cierto tiempo (ej. cada hora)\n// setInterval(checkAndNotify, 1000 * 60 * 60); // Cada hora\n// Para demostración, se puede ejecutar más seguido o al cargar la app\n// checkAndNotify(); // Ejecutar al inicio\n\nexport { checkAndNotify };"],"mappings":"AAAA,SAASA,cAAc,QAAQ,QAAQ;AAEvC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,WAAW,GAAGF,cAAc,CAAC,CAAC;EACpC,IAAI,CAACE,WAAW,EAAE;;EAElB;EACA,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,qBAAqBL,WAAW,CAACM,QAAQ,EAAE,CAAC,CAAC;EACvG,IAAIL,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,KAAK,QAAQ,EAAE;IAChEM,OAAO,CAACC,GAAG,CAAC,SAASR,WAAW,CAACM,QAAQ,0CAA0C,CAAC;IACpF;EACF,CAAC,MAAM,IAAIL,iBAAiB,KAAK,MAAM,EAAE;IACvC,MAAMQ,WAAW,GAAGP,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiBL,WAAW,CAACM,QAAQ,EAAE,CAAC,CAAC,CAC1FI,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK,SAAS,IAAID,CAAC,CAACE,MAAM,KAAK,MAAM,CAAC;IACzD,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;IACtB,MAAMC,WAAW,GAAG,IAAID,IAAI,CAACN,WAAW,CAACQ,IAAI,CAAC;IAC9C,MAAMC,iBAAiB,GAAG,CAACJ,GAAG,GAAGE,WAAW,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;IAEhE,IAAIE,iBAAiB,GAAG,CAAC,EAAE;MAAE;MAC3BX,OAAO,CAACC,GAAG,CAAC,SAASR,WAAW,CAACM,QAAQ,yDAAyD,CAAC;MACnG;IACF;EACF;;EAEA;EACA,IAAIN,WAAW,CAACmB,IAAI,KAAK,OAAO,IAAInB,WAAW,CAACmB,IAAI,KAAK,QAAQ,EAAE;IACjE,MAAMC,QAAQ,GAAGlB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE;IAChE,MAAMgB,QAAQ,GAAGrB,WAAW,CAACqB,QAAQ,IAAI,IAAI,CAAC,CAAC;;IAE/C,MAAMC,mBAAmB,GAAGF,QAAQ,CAACG,MAAM,CAACC,IAAI,IAC9CA,IAAI,CAACC,aAAa,KAAK,iBAAiB,KACvCJ,QAAQ,KAAK,IAAI,IAAIG,IAAI,CAACH,QAAQ,KAAKA,QAAQ,CAClD,CAAC;IAED,MAAMK,iBAAiB,GAAG,CAAC,CAAC;IAC5BJ,mBAAmB,CAACK,OAAO,CAACH,IAAI,IAAI;MAClC,IAAI,CAACE,iBAAiB,CAACF,IAAI,CAACI,YAAY,CAAC,EAAE;QACzCF,iBAAiB,CAACF,IAAI,CAACI,YAAY,CAAC,GAAG;UACrCC,IAAI,EAAEL,IAAI,CAACI,YAAY;UACvBE,SAAS,EAAE,CAAC;UACZC,KAAK,EAAEP,IAAI,CAACQ,aAAa,CAAC;QAC5B,CAAC;MACH;MACAN,iBAAiB,CAACF,IAAI,CAACI,YAAY,CAAC,CAACE,SAAS,IAAIN,IAAI,CAACS,KAAK;IAC9D,CAAC,CAAC;IAEFC,MAAM,CAACC,MAAM,CAACT,iBAAiB,CAAC,CAACC,OAAO,CAACS,QAAQ,IAAI;MACnD,IAAIA,QAAQ,CAACN,SAAS,GAAG,CAAC,EAAE;QAC1BvB,OAAO,CAACC,GAAG,CAAC,SAASR,WAAW,CAACM,QAAQ,+BAA+B8B,QAAQ,CAACP,IAAI,UAAUO,QAAQ,CAACN,SAAS,CAACO,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;QAChI;QACA;MACF;IACF,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA;AACA;AACA;;AAEA,SAAStC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}