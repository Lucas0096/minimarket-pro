{"ast":null,"code":"import{getCurrentUser}from'./auth';const checkAndNotify=()=>{const currentUser=getCurrentUser();if(!currentUser)return;// Recordatorio de Apertura/Cierre de Caja\nconst cashRegisterState=JSON.parse(localStorage.getItem(\"cashRegisterState_\".concat(currentUser.username)));if(cashRegisterState===null||cashRegisterState==='closed'){console.log(\"[BOT] \".concat(currentUser.username,\": \\xA1Recuerda abrir la caja para tu turno!\"));// alert(`[BOT] ${currentUser.username}: ¡Recuerda abrir la caja para tu turno!`); // Para demostración\n}else if(cashRegisterState==='open'){const lastOpening=JSON.parse(localStorage.getItem(\"cashMovements_\".concat(currentUser.username))).find(m=>m.type==='opening'&&m.status==='open');const now=new Date();const openingTime=new Date(lastOpening.date);const hoursSinceOpening=(now-openingTime)/(1000*60*60);if(hoursSinceOpening>8){// Si la caja lleva abierta más de 8 horas\nconsole.log(\"[BOT] \".concat(currentUser.username,\": \\xA1Tu turno est\\xE1 por terminar! Recuerda cerrar la caja.\"));// alert(`[BOT] ${currentUser.username}: ¡Tu turno está por terminar! Recuerda cerrar la caja.`); // Para demostración\n}}// Notificación de Cuentas por Cobrar (solo para Admin y Market)\nif(currentUser.role==='admin'||currentUser.role==='market'){const allSales=JSON.parse(localStorage.getItem('sales'))||[];const marketId=currentUser.marketId||null;// Admin puede ver todos, Market solo el suyo\nconst currentAccountSales=allSales.filter(sale=>sale.paymentMethod==='current_account'&&(marketId===null||sale.marketId===marketId));const customersWithDebt={};currentAccountSales.forEach(sale=>{if(!customersWithDebt[sale.customerName]){customersWithDebt[sale.customerName]={name:sale.customerName,totalDebt:0,phone:sale.customerPhone// Asumiendo que el teléfono se guarda en la venta\n};}customersWithDebt[sale.customerName].totalDebt+=sale.total;});Object.values(customersWithDebt).forEach(customer=>{if(customer.totalDebt>0){console.log(\"[BOT] \".concat(currentUser.username,\": \\xA1Recordatorio! El cliente \").concat(customer.name,\" debe $\").concat(customer.totalDebt.toFixed(2),\".\"));// alert(`[BOT] ${currentUser.username}: ¡Recordatorio! El cliente ${customer.name} debe $${customer.totalDebt.toFixed(2)}.`); // Para demostración\n// Aquí se integraría con Twilio/Zenvia si se tuviera la API\n}});}};// Ejecutar el bot cada cierto tiempo (ej. cada hora)\n// setInterval(checkAndNotify, 1000 * 60 * 60); // Cada hora\n// Para demostración, se puede ejecutar más seguido o al cargar la app\n// checkAndNotify(); // Ejecutar al inicio\nexport{checkAndNotify};","map":{"version":3,"names":["getCurrentUser","checkAndNotify","currentUser","cashRegisterState","JSON","parse","localStorage","getItem","concat","username","console","log","lastOpening","find","m","type","status","now","Date","openingTime","date","hoursSinceOpening","role","allSales","marketId","currentAccountSales","filter","sale","paymentMethod","customersWithDebt","forEach","customerName","name","totalDebt","phone","customerPhone","total","Object","values","customer","toFixed"],"sources":["C:/Users/lucas/Downloads/Minimarket PRO/Version 1.0/src/utils/bot.js"],"sourcesContent":["import { getCurrentUser } from './auth';\n\nconst checkAndNotify = () => {\n  const currentUser = getCurrentUser();\n  if (!currentUser) return;\n\n  // Recordatorio de Apertura/Cierre de Caja\n  const cashRegisterState = JSON.parse(localStorage.getItem(`cashRegisterState_${currentUser.username}`));\n  if (cashRegisterState === null || cashRegisterState === 'closed') {\n    console.log(`[BOT] ${currentUser.username}: ¡Recuerda abrir la caja para tu turno!`);\n    // alert(`[BOT] ${currentUser.username}: ¡Recuerda abrir la caja para tu turno!`); // Para demostración\n  } else if (cashRegisterState === 'open') {\n    const lastOpening = JSON.parse(localStorage.getItem(`cashMovements_${currentUser.username}`))\n      .find(m => m.type === 'opening' && m.status === 'open');\n    const now = new Date();\n    const openingTime = new Date(lastOpening.date);\n    const hoursSinceOpening = (now - openingTime) / (1000 * 60 * 60);\n\n    if (hoursSinceOpening > 8) { // Si la caja lleva abierta más de 8 horas\n      console.log(`[BOT] ${currentUser.username}: ¡Tu turno está por terminar! Recuerda cerrar la caja.`);\n      // alert(`[BOT] ${currentUser.username}: ¡Tu turno está por terminar! Recuerda cerrar la caja.`); // Para demostración\n    }\n  }\n\n  // Notificación de Cuentas por Cobrar (solo para Admin y Market)\n  if (currentUser.role === 'admin' || currentUser.role === 'market') {\n    const allSales = JSON.parse(localStorage.getItem('sales')) || [];\n    const marketId = currentUser.marketId || null; // Admin puede ver todos, Market solo el suyo\n\n    const currentAccountSales = allSales.filter(sale => \n      sale.paymentMethod === 'current_account' && \n      (marketId === null || sale.marketId === marketId)\n    );\n\n    const customersWithDebt = {};\n    currentAccountSales.forEach(sale => {\n      if (!customersWithDebt[sale.customerName]) {\n        customersWithDebt[sale.customerName] = {\n          name: sale.customerName,\n          totalDebt: 0,\n          phone: sale.customerPhone // Asumiendo que el teléfono se guarda en la venta\n        };\n      }\n      customersWithDebt[sale.customerName].totalDebt += sale.total;\n    });\n\n    Object.values(customersWithDebt).forEach(customer => {\n      if (customer.totalDebt > 0) {\n        console.log(`[BOT] ${currentUser.username}: ¡Recordatorio! El cliente ${customer.name} debe $${customer.totalDebt.toFixed(2)}.`);\n        // alert(`[BOT] ${currentUser.username}: ¡Recordatorio! El cliente ${customer.name} debe $${customer.totalDebt.toFixed(2)}.`); // Para demostración\n        // Aquí se integraría con Twilio/Zenvia si se tuviera la API\n      }\n    });\n  }\n};\n\n// Ejecutar el bot cada cierto tiempo (ej. cada hora)\n// setInterval(checkAndNotify, 1000 * 60 * 60); // Cada hora\n// Para demostración, se puede ejecutar más seguido o al cargar la app\n// checkAndNotify(); // Ejecutar al inicio\n\nexport { checkAndNotify };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}